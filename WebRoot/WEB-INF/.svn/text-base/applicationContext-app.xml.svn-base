<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd          
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- 读取dataSource.properties配置文件 -->
	<context:property-placeholder location="classpath*:dataSource.properties" />

	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<!--
			数据库驱动
		-->

		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
		<!--
			每60秒检查所有连接池中的空闲连接。Default: 0
		-->

		<property name="acquireRetryAttempts" value="${acquireRetryAttempts}" />
		<!--
			定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
		-->

		<property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}" />
		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default:
			false
		-->

		<property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
		<!--
			因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false
		-->

		<property name="minPoolSize" value="${minPoolSize}" />
		<!--
			最小链接数
		-->

		<property name="maxPoolSize" value="${maxPoolSize}" />
		<!--
			最大连接数
		-->

		<property name="numHelperThreads" value="${numHelperThreads}" />
		<!--
			通过多线程实现多个操作同时被执行。Default: 3
		-->

		<property name="initialPoolSize" value="${initialPoolSize}" /> <!--连接池初始化时获取的链接数，介于minPoolSize和maxPoolSize之间 -->

		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!--
			在当前连接数耗尽的时候，一次获取的新的连接数
		-->

		<property name="maxIdleTime" value="${maxIdleTime}" />
		<!--
			最大空闲的时间，单位是秒，无用的链接再过时后会被回收
		-->

		<property name="maxStatements" value="${maxStatements}" />
		<!--
			JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素
		-->

	</bean>

	<bean id="adminDataSource" parent="parentDataSource">
		<property name="user" value="${jdbc.username.master}" />
		<property name="password" value="${jdbc.password.master}" />
		<property name="jdbcUrl" value="${jdbc.url.master}" />

	</bean>
	<!--
		<bean id="userDataSource" parent="parentDataSource"> <property
		name="user" value="${jdbc.username.slave_1}" /> <property
		name="password" value="${jdbc.password.slave_1}" /> <property
		name="jdbcUrl" value="${jdbc.url.slave_1}" /> </bean>
	-->
	<bean id="dataSource" class="com.aisino.cec.common.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="adminDataSource" key="adminDataSource"></entry>
				<!--  <entry value-ref="userDataSource" key="userDataSource"></entry>-->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="adminDataSource" />
	</bean>

	<!--配置数据库会话工厂-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--
			<property name="configLocation"
			value="classpath:MyBatis-Configuration.xml"> </property>
		-->
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations">
			<array>
				<value>classpath*:com/aisino/cec/*/mapping/**/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.aisino.cec" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							reasonable=true
          				</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!--  事务管理器配置 -->
	<bean id="tManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.aisino.cec.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 通知配置 -->
	<tx:advice id="txAdvice" transaction-manager="tManager">
		<tx:attributes>
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="save*" rollback-for="Exception" />
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="*TxPro" rollback-for="Exception" />
			<tx:method name="select*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务切面配置 -->
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* *..service..*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>

	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" />


</beans>
